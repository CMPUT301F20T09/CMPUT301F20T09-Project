package com.example.pocketbook.util;

import com.example.pocketbook.model.Book;

import java.util.Arrays;
import java.util.List;

/**
 * Parser class ensures the validity of the
 * objects and text within the app
 */
public class Parser {

    private static int performFirebaseChecks = 1;

    public static void turnOffFirebaseChecks() {
        performFirebaseChecks = 0;
    }

    public static void turnOnFirebaseChecks() {
        performFirebaseChecks = 1;
    }

    /////////////////////////////////////////  BOOK PARSER /////////////////////////////////////////

    private static List<String> conditions = Arrays.asList("GREAT",
            "GOOD", "FAIR", "ACCEPTABLE");

    private static List<String> statuses = Arrays.asList("AVAILABLE",
            "REQUESTED", "ACCEPTED", "BORROWED");

    /**
     * This returns a valid Book object if arguments are valid, null otherwise
     * @param id book id that was randomly generated by Firebase
     * @param title book title
     * @param author book author
     * @param isbn book isbn
     * @param owner app user that owns the book
     * @param status book status; can be "AVAILABLE", "REQUESTED", "ACCEPTED" or "BORROWED"
     * @param comment app user's optional comments about the book
     * @param condition book condition; can be "GREAT", "GOOD", "FAIR" or "ACCEPTABLE"
     * @param photo name of app user's optional photo for the book
     * @return
     *      valid Book object if arguments are valid
     *      null otherwise
     */
    public static Book parseBook(String id, String title, String author, String isbn, String owner,
                                 String status, String comment, String condition, String photo) {

        // return null if non-optional fields are null
        if ((title == null) || (author == null) || (isbn == null)
                || (owner == null) || (status == null) || (condition == null)) {
            return null;
        }

        // trim all values
        id = (id == null) ? "" : id.trim();  // replace null, in the case of a new book
        title = title.trim();
        author = author.trim();
        isbn = isbn.trim();
        owner = owner.trim();
        status = status.trim().toUpperCase();
        comment = (comment == null) ? "" : comment.trim();  // replace null with ""
        condition = condition.trim().toUpperCase();
        photo = (photo == null) ? "" : photo.trim();  // replace null with ""

        // if all fields (other than isbn) are valid
        if (isValidId(id) && isValidTitle(title) && isValidAuthor(author) && isValidOwner(owner)
                && isValidStatus(status) && isValidCondition(condition) && isValidPhoto(photo)) {

            // try to convert isbn to isbn13
            isbn = convertToIsbn13(isbn);

            // return null if isbn conversion is invalid
            if (isbn == null) {
                return null;
            }

            // return a new Book object if all fields are valid
            return new Book(id, title, author, isbn, owner, status, comment, condition, photo);
        }

        // return null if not all fields are valid
        return null;
    }

    /**
     * This checks if a book id is valid
     * @param id book id that was randomly generated by Firebase
     * @return
     *      true if empty string or valid id (i.e. id exists in Firebase)
     *      false otherwise
     */
    public static boolean isValidId(String id) {
        if (id == null) {  // newly created local books won't have ids
            return false;
        }
        if (id.trim().length() == 0) {  // if id is an empty string
            return true;
        }

        // TODO: if !empty && (id exists in Firebase, return true) [for catalogue.bookID queries] ??
        //  if (performFirebaseChecks) return FirebaseIntegrity.isBookIdInFirebase(bookID);
        return true;
    }

    /**
     * This checks if a book title is valid
     * @param title book title
     * @return
     *      true if title is not null or an empty string
     *      false otherwise
     */
    public static boolean isValidTitle(String title) {
        return ((title != null) && (title.trim().length() > 0));
    }

    /**
     * This checks if a book author is valid
     * @param author book author
     * @return
     *      true if author is not null or an empty string
     *      false otherwise
     */
    public static boolean isValidAuthor(String author) {
        return ((author != null) && (author.trim().length() > 0));
    }

    /**
     * This checks if a book owner is valid
     * @param owner app user that owns the book
     * @return
     *      true if owner is not null or an empty string and is lowercase
     *      false otherwise
     */
    public static boolean isValidOwner(String owner) {
        if ((owner == null) || (owner.equals("")) || !(owner.equals(owner.toLowerCase()))) {
            return false;
        }
        // TODO: check that owner exists in FirebaseAuth and in Firestore;
        //  this also handles email validation
        //  if (performFirebaseChecks) return FirebaseIntegrity.isBookOwnerInFirebase(owner);
        return true;
    }

    /**
     * This checks if the status specified is in the list of statuses
     * @param status book status
     * @return
     *      true if status is in ["AVAILABLE", "REQUESTED", "ACCEPTED", "BORROWED"]
     *      false otherwise
     */
    public static boolean isValidStatus(String status) {
        return statuses.contains(status);
    }

    /**
     * This checks if the condition specified is in the list of conditions
     * @param condition book condition
     * @return
     *      true if condition is in ["GREAT", "GOOD", "FAIR", "ACCEPTABLE"]
     *      false otherwise
     */
    public static boolean isValidCondition(String condition) {
        return conditions.contains(condition);
    }

    /**
     * This checks if a photo name is valid
     * @param photo name of app user's optional photo for the book
     * @return
     *      true if photo is an empty string or a jpg file
     *      false otherwise
     */
    public static boolean isValidPhoto(String photo) {
        if (photo == null) {
            return false;
        }
        return photo.equals("") || (photo.endsWith(".jpg") && (photo.length() > 4));
        // TODO does photo exist in Firebase?
        //  if (performFirebaseChecks) return FirebaseIntegrity.isBookPhotoInFirebase(owner);
    }

    /**
     * This checks if a string is not a number
     * @param text string to be converted to number
     * @return
     *      false if input is a number
     *      true otherwise
     */
    public static boolean isNotDigit(String text) {
        try {
            Long.parseLong(text);
            return false;
        } catch (NumberFormatException ex) {
            return true;
        }
    }

    /**
     * This checks if an isbn is valid isbn10
     * @param isbn book isbn
     * @return
     *      true if isbn is valid isbn10
     *      false otherwise
     */
    public static boolean isValidIsbn10(String isbn) {
        if (isbn == null) {
            return false;
        }

        // remove spaces and dashes from isbn
        isbn = isbn.replace("-", "")
                .replace(" ", "").toUpperCase();

        int isbnLength = isbn.length();

        if (isbnLength != 10) {  // isbn10 has to be 10 digits
            return false;
        }

        String lastCharacter = Character.toString(isbn.charAt(isbnLength - 1));
        boolean lastCharacterIsX = lastCharacter.equals("X");
        String isbnWithoutLastCharacter = isbn.substring(0, isbnLength - 1);

        // return false if the first 9 isbn digits are not numbers
        // OR if the last character is not a digit and is not 'X'
        if (isNotDigit(isbnWithoutLastCharacter) ||
                ((isNotDigit(lastCharacter)) && !(lastCharacterIsX))) {
            return false;
        }

        // compute the weighted sum of the first 9 isbn digits
        int sum = 0;
        for (int index = 0; index < 9; index++) {
            int digit = isbn.charAt(index) - '0';
            sum += (digit * (10 - index));
        }

        // if the last character is 'X', add 10 to sum, else add its value
        sum += (lastCharacterIsX ? 10 : (isbn.charAt(isbnLength - 1) - '0'));

        return (sum % 11 == 0);  // return whether weighted sum is divisible by 11
    }

    /**
     * This gets the checkBit of the valid first 12 digits of an isbn13
     * @param isbn book isbn
     * @return
     *      valid checkBit if computation was successful
     *      null otherwise
     */
    public static String getIsbn13CheckBit(String isbn) {
        if (isbn == null) {
            return null;
        }

        // remove spaces and dashes from isbn
        isbn = isbn.replace("-", "")
                .replace(" ", "").toUpperCase();
        int isbnLength = isbn.length();

        // return null if isbn digits are not numbers
        if (isNotDigit(isbn)) {
            return null;
        }

        if ((isbnLength < 12) ||                          // if isbn isn't starting digits of isbn13
                !(isbn.substring(0, 3).equals("978"))) {  // if first 3 digits of isbn are incorrect
            return null;
        }

        int odd = 0;
        int even = 0;
        int checkBit;

        // convert isbn string into array of integers
        int[] isbnIntArray = isbn.chars().map(strDigit -> strDigit - '0').toArray();

        // perform the isbn13 checkBit computation
        for (int index = 0; index < 6; index++) {
            even += isbnIntArray[2 * index];
            odd += isbnIntArray[(2 * index) + 1] * 3;
        }
        int isbnModulo = (even + odd) % 10;
        checkBit = (isbnModulo == 0) ? 0 : (10 - isbnModulo);

        // return the checkBit
        return String.valueOf(checkBit);
    }

    /**
     * This checks if an isbn is valid isbn13
     * @param isbn book isbn
     * @return
     *      true if isbn is valid isbn13
     *      false otherwise
     */
    public static boolean isValidIsbn13(String isbn) {
        if (isbn == null) {
            return false;
        }

        // remove spaces and dashes from isbn
        isbn = isbn.replace("-", "")
                .replace(" ", "").toUpperCase();

        int isbnLength = isbn.length();

        if (isbnLength != 13) {  // isbn13 has to be 13 digits
            return false;
        }

        // return false if isbn13 digits are not numbers
        if (isNotDigit(isbn)) {
            return false;
        }

        String lastCharacter = Character.toString(isbn.charAt(isbnLength - 1));
        String checkBit = getIsbn13CheckBit(isbn);

        // input isbn13 is valid if computed checkBit is equal to its last character
        return (lastCharacter.equals(checkBit));
    }

    /**
     * This converts isbn10 or isbn13 to valid isbn13, if possible
     * @param isbn book isbn
     * @return
     *      valid isbn13 if conversion was successful
     *      null otherwise
     */
    public static String convertToIsbn13(String isbn) {
        if (isbn == null) {
            return null;
        }

        // remove spaces and dashes from isbn
        isbn = isbn.replace("-", "")
                .replace(" ", "").toUpperCase();

        int isbnLength = isbn.length();

        if ((isbnLength != 10) && (isbnLength != 13)) {  // if input is not isbn10 or isbn13
            return null;
        }

        if ((isbnLength == 13) && isValidIsbn13(isbn)) {  // return valid isbn13 on isbn13 input
            return isbn;
        }

        // convert isbn10 to isbn13 if isbn10 is valid
        if ((isbnLength == 10) && isValidIsbn10(isbn)) {
            String isbnWithoutLastCharacter = isbn.substring(0, isbnLength - 1);
            isbn = "978" + isbnWithoutLastCharacter;
            String checkBit = getIsbn13CheckBit(isbn);

            if (checkBit != null) {
                isbn += checkBit;
                return isbn;
            }
            return null;
        }

        return null;

    }
}
